"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const readline = require("readline");
const lib_1 = require("./lib");
/** Base methods for all methods of communicating information to the user. */
const baseDelegates = {
    error: (error) => {
        console.log(error);
    },
    solved: (answer) => {
        console.log(`The answer is: ${answer.answer}, and I found it in ${answer.attempts} tries.`);
    }
};
const testDelegates = (testAnswer, done) => {
    return Object.assign({}, baseDelegates, { guess: (guess) => {
            // in lieu of user input, just calculate the score on our own using our predetermined test answer,
            // and let the solver know. 
            return new Promise((resolve) => {
                console.log(guess);
                const score = lib_1.calculateScore(testAnswer, guess);
                console.log("response> " + lib_1.printScore(score));
                resolve(score);
            });
        }, solved: (answer) => {
            baseDelegates.solved(answer);
            // verify answer before continuing. 
            if (answer.answer == testAnswer) {
                console.log("Answer is CORRECT.");
                done(answer.attempts);
            }
            else {
                throw new Error("Invalid answer. The answer was: " + testAnswer);
            }
        } });
};
const consoleDelegates = rl => {
    return Object.assign({}, baseDelegates, { guess: (guess) => {
            return new Promise((resolve, _reject) => {
                console.log(guess);
                rl.question("response> ", input => {
                    const score = lib_1.parseScore(input);
                    resolve(score);
                });
            });
        }, solved: (answer) => {
            baseDelegates.solved(answer);
            rl.close();
        } });
};
/**
 * "Recursive" iteration pattern. Each loop is asynchronous so we need to create a closure
 * and call the next attempt when the current one is finished.
 */
function nextAttempt(left, moves = 0, total = left) {
    // base case, no iterations left. Show average solve length and exunt, stage left.
    if (left == 0) {
        console.log("Average solve length: " + moves / total);
        return;
    }
    // show a running average of the solution length. For my own amusement as I watch the iterations tick. 
    const turn = total - left;
    if (turn != 0) {
        console.log(`Attempt #${turn + 1}, current average moves: ${moves / turn}`);
    }
    // gather the next random config and attempt to solve it. 
    const config = lib_1.getRandomConfig();
    const delegates = testDelegates(config, (a) => {
        nextAttempt(left - 1, moves + a, total);
    });
    lib_1.loop(delegates);
}
if (process.argv.indexOf("auto") != -1) {
    // Auto mode. Specify "auto #" in the args and it will pick them out. It's finicky so don't get fancy. 
    const numbers = process.argv.map(x => parseInt(x, 10)).filter(x => x && x > 0);
    const iterations = numbers.length > 0 ? numbers[0] : 1000;
    console.log(`Performing ${iterations} iterations...`);
    nextAttempt(iterations);
}
else {
    // Input mode. Use readline to gather feedback from the user instead of figuring it out on our own.
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });
    // only do one loop. If the user wants more, they can run it again. 
    lib_1.loop(consoleDelegates(rl));
}
//# sourceMappingURL=data:application/json;base64,