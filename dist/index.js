"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var lib_1 = require("./lib");
var readline = require("readline");
var baseDelegates = {
    error: function (error) {
        console.log(error);
    },
    solved: function (answer) {
        console.log("The answer is: " + answer.answer + ", and I found it in " + answer.attempts + " tries.");
    }
};
var testDelegates = function (testAnswer, done) {
    return __assign({}, baseDelegates, { guess: function (guess) {
            return new Promise(function (resolve, _reject) {
                console.log(guess);
                var score = lib_1.calculateScore(testAnswer, guess);
                console.log("input> " + lib_1.printScore(score));
                resolve(score);
            });
        }, solved: function (answer) {
            baseDelegates.solved(answer);
            if (answer.answer == testAnswer) {
                console.log("Answer is CORRECT.");
                done(answer.attempts);
            }
            else {
                throw new Error("Invalid answer. The answer was: " + testAnswer);
            }
        } });
};
var consoleDelegates = function (rl) {
    return __assign({}, baseDelegates, { guess: function (guess) {
            return new Promise(function (resolve, _reject) {
                console.log(guess);
                rl.question("input> ", function (input) {
                    resolve(lib_1.parseScore(input));
                });
            });
        }, solved: function (answer) {
            baseDelegates.solved(answer);
            rl.close();
        } });
};
function nextAttempt(left, moves, total) {
    if (moves === void 0) { moves = 0; }
    if (total === void 0) { total = left; }
    if (left == 0) {
        console.log("Average solve length: " + moves / total);
        return;
    }
    var turn = total - left;
    if (turn != 0) {
        console.log("Attempt #" + (turn + 1) + ", current average moves: " + moves / turn);
    }
    var config = lib_1.getRandomConfig();
    var delegates = testDelegates(config, function (a) {
        nextAttempt(left - 1, moves + a, total);
    });
    lib_1.loop(delegates);
}
if (process.argv.indexOf("auto") != -1) {
    var numbers = process.argv.map(function (x) { return parseInt(x, 10); }).filter(function (x) { return x && x > 0; });
    var iterations = numbers.length > 0 ? numbers[0] : 1000;
    console.log("Performing " + iterations + " iterations...");
    nextAttempt(iterations);
}
else {
    var rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });
    lib_1.loop(consoleDelegates(rl));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLDZCQUF5RztBQUV6RyxtQ0FBcUM7QUFFckMsSUFBTSxhQUFhLEdBQUc7SUFDbEIsS0FBSyxFQUFFLFVBQUMsS0FBVTtRQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUNELE1BQU0sRUFBRSxVQUFDLE1BQWM7UUFDbkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBa0IsTUFBTSxDQUFDLE1BQU0sNEJBQXVCLE1BQU0sQ0FBQyxRQUFRLFlBQVMsQ0FBQyxDQUFDO0lBQ2hHLENBQUM7Q0FDSixDQUFBO0FBS0QsSUFBTSxhQUFhLEdBQWtCLFVBQUMsVUFBa0IsRUFBRSxJQUFnQztJQUN0RixNQUFNLGNBQ0MsYUFBYSxJQUNoQixLQUFLLEVBQUUsVUFBQyxLQUFhO1lBQ2pCLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxPQUFPO2dCQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNuQixJQUFNLEtBQUssR0FBRyxvQkFBYyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFDaEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsZ0JBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUMzQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbkIsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLEVBQ0QsTUFBTSxFQUFFLFVBQUMsTUFBYztZQUNuQixhQUFhLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzdCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQztnQkFDOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FB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SyxFQUFFLE9BQU8sQ0FBQyxLQUFLO1FBQ3BCLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTtLQUN6QixDQUFDLENBQUM7SUFFSCxVQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMvQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2FsY3VsYXRlU2NvcmUsIGdldFJhbmRvbUNvbmZpZywgbG9vcCwgcHJpbnRTY29yZSwgQW5zd2VyLCBwYXJzZVNjb3JlLCBEZWxlZ2F0ZXMgfSBmcm9tICcuL2xpYic7XHJcblxyXG5pbXBvcnQgKiBhcyByZWFkbGluZSBmcm9tICdyZWFkbGluZSc7XHJcblxyXG5jb25zdCBiYXNlRGVsZWdhdGVzID0ge1xyXG4gICAgZXJyb3I6IChlcnJvcjogYW55KSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgfSxcclxuICAgIHNvbHZlZDogKGFuc3dlcjogQW5zd2VyKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYFRoZSBhbnN3ZXIgaXM6ICR7YW5zd2VyLmFuc3dlcn0sIGFuZCBJIGZvdW5kIGl0IGluICR7YW5zd2VyLmF0dGVtcHRzfSB0cmllcy5gKTtcclxuICAgIH1cclxufVxyXG5cclxudHlwZSBUZXN0RGVsZWdhdGVzID0ge1xyXG4gICAgKHRlc3RBbnN3ZXI6IHN0cmluZywgZG9uZTogKGF0dGVtcHRzOiBudW1iZXIpID0+IHZvaWQpOiBEZWxlZ2F0ZXM7XHJcbn1cclxuY29uc3QgdGVzdERlbGVnYXRlczogVGVzdERlbGVnYXRlcyA9ICh0ZXN0QW5zd2VyOiBzdHJpbmcsIGRvbmU6IChhdHRlbXB0czogbnVtYmVyKSA9PiB2b2lkKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLmJhc2VEZWxlZ2F0ZXMsXHJcbiAgICAgICAgZ3Vlc3M6IChndWVzczogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgX3JlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZ3Vlc3MpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2NvcmUgPSBjYWxjdWxhdGVTY29yZSh0ZXN0QW5zd2VyLCBndWVzcyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImlucHV0PiBcIiArIHByaW50U2NvcmUoc2NvcmUpKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoc2NvcmUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNvbHZlZDogKGFuc3dlcjogQW5zd2VyKSA9PiB7XHJcbiAgICAgICAgICAgIGJhc2VEZWxlZ2F0ZXMuc29sdmVkKGFuc3dlcik7XHJcbiAgICAgICAgICAgIGlmIChhbnN3ZXIuYW5zd2VyID09IHRlc3RBbnN3ZXIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQW5zd2VyIGlzIENPUlJFQ1QuXCIpO1xyXG4gICAgICAgICAgICAgICAgZG9uZShhbnN3ZXIuYXR0ZW1wdHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhbnN3ZXIuIFRoZSBhbnN3ZXIgd2FzOiBcIiArIHRlc3RBbnN3ZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG50eXBlIENvbnNvbGVEZWxlZ2F0ZXMgPSAocmw6IHJlYWRsaW5lLlJlYWRMaW5lKSA9PiBEZWxlZ2F0ZXM7XHJcbmNvbnN0IGNvbnNvbGVEZWxlZ2F0ZXM6IENvbnNvbGVEZWxlZ2F0ZXMgPSBybCA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLmJhc2VEZWxlZ2F0ZXMsXHJcbiAgICAgICAgZ3Vlc3M6IChndWVzczogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgX3JlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZ3Vlc3MpO1xyXG4gICAgICAgICAgICAgICAgcmwucXVlc3Rpb24oXCJpbnB1dD4gXCIsIGlucHV0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHBhcnNlU2NvcmUoaW5wdXQpKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNvbHZlZDogKGFuc3dlcjogQW5zd2VyKSA9PiB7XHJcbiAgICAgICAgICAgIGJhc2VEZWxlZ2F0ZXMuc29sdmVkKGFuc3dlcik7XHJcbiAgICAgICAgICAgIHJsLmNsb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBuZXh0QXR0ZW1wdChsZWZ0OiBudW1iZXIsIG1vdmVzOiBudW1iZXIgPSAwLCB0b3RhbDogbnVtYmVyID0gbGVmdCkge1xyXG4gICAgaWYgKGxlZnQgPT0gMCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiQXZlcmFnZSBzb2x2ZSBsZW5ndGg6IFwiICsgbW92ZXMgLyB0b3RhbCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHR1cm4gPSB0b3RhbCAtIGxlZnQ7XHJcbiAgICBpZiAodHVybiAhPSAwKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYEF0dGVtcHQgIyR7dHVybiArIDF9LCBjdXJyZW50IGF2ZXJhZ2UgbW92ZXM6ICR7bW92ZXMgLyB0dXJufWApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNvbmZpZyA9IGdldFJhbmRvbUNvbmZpZygpO1xyXG4gICAgY29uc3QgZGVsZWdhdGVzID0gdGVzdERlbGVnYXRlcyhjb25maWcsIChhKSA9PiB7XHJcbiAgICAgICAgbmV4dEF0dGVtcHQobGVmdCAtIDEsIG1vdmVzICsgYSwgdG90YWwpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgbG9vcChkZWxlZ2F0ZXMpO1xyXG59XHJcblxyXG5pZiAocHJvY2Vzcy5hcmd2LmluZGV4T2YoXCJhdXRvXCIpICE9IC0xKSB7XHJcbiAgICBjb25zdCBudW1iZXJzID0gcHJvY2Vzcy5hcmd2Lm1hcCh4ID0+IHBhcnNlSW50KHgsIDEwKSkuZmlsdGVyKHggPT4geCAmJiB4ID4gMCk7XHJcbiAgICBjb25zdCBpdGVyYXRpb25zID0gbnVtYmVycy5sZW5ndGggPiAwID8gbnVtYmVyc1swXSA6IDEwMDA7XHJcbiAgICBjb25zb2xlLmxvZyhgUGVyZm9ybWluZyAke2l0ZXJhdGlvbnN9IGl0ZXJhdGlvbnMuLi5gKTtcclxuICAgIG5leHRBdHRlbXB0KGl0ZXJhdGlvbnMpO1xyXG59XHJcbmVsc2Uge1xyXG4gICAgY29uc3QgcmwgPSByZWFkbGluZS5jcmVhdGVJbnRlcmZhY2Uoe1xyXG4gICAgICAgIGlucHV0OiBwcm9jZXNzLnN0ZGluLFxyXG4gICAgICAgIG91dHB1dDogcHJvY2Vzcy5zdGRvdXRcclxuICAgIH0pO1xyXG5cclxuICAgIGxvb3AoY29uc29sZURlbGVnYXRlcyhybCkpO1xyXG59XHJcbiJdfQ==